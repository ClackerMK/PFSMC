#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <dirent.h>

#include "mainwindow.h"
#include "ui_mainwindow.h"

std::array<std::array<int, 21>,31> readArrayFromCSV(std::istream& str)
{
    std::array<std::array<int, 21>,31> result;
    std::string line;

    int i = 0;
    while (std::getline(str, line))
    {
        std::stringstream          lineStream(line);
        std::string                cell;

        result[i] = std::array<int, 21>();

        int y = 0;
        while(std::getline(lineStream,cell, ';'))
        {
            result[i][y] = std::stoi(cell);
            y++;
        }
        i++;
    }

    return result;
}

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    DIR* dir;
    struct dirent *ent;

    QStringList ArrayHorizontalHeader;
    ArrayHorizontalHeader << "AC" << "AC (t)" << "AC (f)" << \
                   "Fort" << "Ref" << "Will" << \
                   "CMD" << "hp" << \
                   "DC (Abillity)" << "DC (Spell)" << \
                   "Ability Mod" << \
                   "Skill (Master)" << "Skill (Good)" << \
                   "Options";
    QStringList ArrayVerticalHeader;
    for (int i = 0; i < 31; i++)
    {
        if (i == 0)
            ArrayVerticalHeader << "1/2 (0)";
        else
            ArrayVerticalHeader << QString::number(i);
    }

    ui->setupUi(this);


    ui->ArrayTable->setRowCount(31);
    ui->ArrayTable->setColumnCount(14);
    ui->ArrayTable->setHorizontalHeaderLabels(ArrayHorizontalHeader);
    ui->ArrayTable->setVerticalHeaderLabels(ArrayVerticalHeader);
    ui->ArrayTable->resizeColumnsToContents();

    for (int i = 1; i < ui->tabWidget->count(); i++)
    {
        ui->tabWidget->setTabEnabled(i, false);
    }

    if ((dir = opendir(".\\Arrays")) != NULL) {
        while ((ent = readdir (dir)) != NULL) {
            std::string name(ent->d_name);
            std::string path(".\\Arrays\\" + name);
            size_t found  = name.find(".csv");
            if (found != std::string::npos)
            {
               std::ifstream file;
               file.open(path.c_str());
               if (file.is_open())
               {
                   std::cout << "Starts reading Arrays" << name << std::endl;
                   ui->ArrayBox->addItem(QString::fromStdString(name.substr(0,found)));
                   ui->ArrayBox->setCurrentIndex(-1);
                   arrays[name.substr(0, found)] = readArrayFromCSV(file);
               }
            }
        }
        closedir (dir);
    } else {
        /* could not open directory */
        perror ("");
    }

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_ArrayBox_currentIndexChanged(const QString &arg1)
{
    for (size_t i = 0; i < arrays[arg1.toStdString()].size(); i++)
    {
        for (size_t y = 0; y < ui->ArrayTable->columnCount(); y++)
        {
            QString str;
            if (y < 10)
            {
                str = QString::number(arrays[arg1.toStdString()][i][y]);
            } else if (y == 10)
            {

                str = "+" + QString::number(arrays[arg1.toStdString()][i][y]) + ",";
                str += "+" + QString::number(arrays[arg1.toStdString()][i][y+1]) +",";
                str += "+" + QString::number(arrays[arg1.toStdString()][i][y+2]);
            } else if (y == 11)
            {
                str = "+" + QString::number(arrays[arg1.toStdString()][i][y+2]) + " x " + QString::number(arrays[arg1.toStdString()][i][y+3]);
            } else if (y == 12)
            {
                str = "+" + QString::number(arrays[arg1.toStdString()][i][y+3]) + " x " + QString::number(arrays[arg1.toStdString()][i][y+4]);
            } else
            {
                str = QString::number(arrays[arg1.toStdString()][i][y+4]) + "c, ";
                str += QString::number(arrays[arg1.toStdString()][i][y+5]) + "s, ";
                str += QString::number(arrays[arg1.toStdString()][i][y+6]) + "m, ";
                str += QString::number(arrays[arg1.toStdString()][i][y+7]) + "a, ";
            }
            ui->ArrayTable->setItem(i,y, new QTableWidgetItem(str));
        }
    }
    ui->ArrayTable->resizeColumnsToContents();
    ui->continueStep1->setEnabled(arg1 != "");
}

void MainWindow::on_ArrayBox_activated(const QString &arg1)
{
}

void MainWindow::on_continueStep1_released()
{
    ui->tabWidget->setTabEnabled(1,true);
}
